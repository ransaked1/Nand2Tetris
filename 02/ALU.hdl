// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   
   // Zero the x and y
   Not16(in=x, out=notx);
   Not16(in=y, out=noty);  
   And16(a=x, b=notx, out=zerox);
   And16(a=y, b=noty, out=zeroy);
   Mux16(a=x, b=zerox, sel=zx, out=rezx1);
   Mux16(a=y, b=zeroy, sel=zy, out=rezy1);
   
   // Negate the x and y
   Not16(in=rezx1, out=negx);
   Not16(in=rezy1, out=negy);   
   Mux16(a=rezx1, b=negx, sel=nx, out=finalx);
   Mux16(a=rezy1, b=negy, sel=ny, out=finaly);
   
   // Compute f
   Add16(a=finalx, b=finaly, out=addf);
   And16(a=finalx, b=finaly, out=andf);
   Mux16(a=andf, b=addf, sel=f, out=tempout);
   
   // Check f negation
   Not16(in=tempout, out=negout);
   
   // Outputs for out, ng and zr
   Mux16(a=tempout, b=negout, sel=no, out=tmpout);
   
   // Dummy mux to output out
   Mux16(a=tmpout, b=tmpout, sel=true, out=out);
   
   // Check ng
   And16(a=tmpout, b=true, out[0..7]=zr1, out[8..15]=zr2, out[15]=ng);
   
   // Check zr
   Or8Way(in=zr1,out=or1);
   Or8Way(in=zr2,out=or2);
   Or(a=or1,b=or2,out=or3);
   Not(in=or3,out=zr);
}