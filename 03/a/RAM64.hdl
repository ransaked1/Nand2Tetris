// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way(in=true, sel=address[0..2], a=l1, b=l2, c=l3, d=l4, e=l5, f=l6, g=l7, h=l8);
	
	And(a=l1, b=load, out=ram1);
	And(a=l2, b=load, out=ram2);
	And(a=l3, b=load, out=ram3);
	And(a=l4, b=load, out=ram4);
	And(a=l5, b=load, out=ram5);
	And(a=l6, b=load, out=ram6);
	And(a=l7, b=load, out=ram7);
	And(a=l8, b=load, out=ram8);
	
	RAM8(in=in, load=ram1, address=address[3..5], out=r1);
	RAM8(in=in, load=ram2, address=address[3..5], out=r2);
	RAM8(in=in, load=ram3, address=address[3..5], out=r3);
	RAM8(in=in, load=ram4, address=address[3..5], out=r4);
	RAM8(in=in, load=ram5, address=address[3..5], out=r5);
	RAM8(in=in, load=ram6, address=address[3..5], out=r6);
	RAM8(in=in, load=ram7, address=address[3..5], out=r7);
	RAM8(in=in, load=ram8, address=address[3..5], out=r8);
	
	Mux8Way16(a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8, sel=address[0..2], out=out);
}